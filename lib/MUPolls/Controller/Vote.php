<?php
/**
 * MUPolls.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUPolls
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * Vote controller class providing navigation and interaction functionality.
 */
class MUPolls_Controller_Vote extends MUPolls_Controller_Base_Vote
{
    /**
     * This action provides a handling of edit requests.
     *
     * @param string  $tpl          Name of alternative template (to be used instead of the default template).
     * @param boolean $raw          Optional way to display a template instead of fetching it (required for standalone output).
     *
     * @return mixed Output.
     */
    public function edit()
    {
        $legacyControllerType = $this->request->query->filter('lct', 'user', FILTER_SANITIZE_STRING);
        System::queryStringSetVar('type', $legacyControllerType);
        $this->request->query->set('type', $legacyControllerType);
    
        $controllerHelper = new MUPolls_Util_Controller($this->serviceManager);
        
        if ($legacyControllerType == 'admin') {
        
        // parameter specifying which type of objects we are treating
        $objectType = 'vote';
        $utilArgs = array('controller' => 'vote', 'action' => 'edit');
        $permLevel = $legacyControllerType == 'admin' ? ACCESS_ADMIN : ACCESS_EDIT;
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel), LogUtil::getErrorMsgPermission());
        // create new Form reference
        $view = FormUtil::newForm($this->name, $this);
        
        // build form handler class name
        $handlerClass = $this->name . '_Form_Handler_Vote_Edit';
        
        // determine the output template
        $viewHelper = new MUPolls_Util_View($this->serviceManager);
        $template = $viewHelper->getViewTemplate($this->view, $objectType, 'edit', array());
        
        // execute form using supplied template and page event handler
        return $view->execute($template, new $handlerClass());
        } else {
        	$dom = ZLanguage::getModuleDomain($this->name);
        	
        	$pollId = $this->request->request->filter('poll', 0, FILTER_VALIDATE_INT);
        	$optionId = $this->request->request->filter('option', 0, FILTER_VALIDATE_INT);
        	$currentUrl = $this->request->request->filter('currentUrl');

        	if ($optionId == 0) {    		
        		LogUtil::registerError(__('You have to select one option!', $dom));
        		return System::redirect($currentUrl);
        	}
        	$voteArgs = array('pollId' => $pollId, 'optionId' => $optionId);
        	ModUtil::apiFunc($this->name, 'user', 'vote', $voteArgs);
        	LogUtil::registerStatus(__('Thank you for voting.', $dom));
        	
        	return System::redirect($currentUrl);
        }
    }
}
