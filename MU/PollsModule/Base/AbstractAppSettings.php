<?php
/**
 * Polls.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\PollsModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;
use MU\PollsModule\Validator\Constraints as PollsAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var GroupRepositoryInterface
     */
    protected $groupRepository;
    
    /**
     * @Assert\NotBlank()
     * @PollsAssert\ListEntry(entityName="appSettings", propertyName="kindOfVoting", multiple=false)
     * @var string $kindOfVoting
     */
    protected $kindOfVoting = 'Session';
    
    /**
     * Used to determine moderator user accounts for sending email notifications.
     *
     * @Assert\NotBlank()
     * @var integer $moderationGroupForPolls
     */
    protected $moderationGroupForPolls = 2;
    
    /**
     * The amount of options shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $optionEntriesPerPage
     */
    protected $optionEntriesPerPage = 10;
    
    /**
     * Whether to add a link to options of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnOptionsOnAccountPage
     */
    protected $linkOwnOptionsOnAccountPage = true;
    
    /**
     * The amount of polls shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $pollEntriesPerPage
     */
    protected $pollEntriesPerPage = 10;
    
    /**
     * Whether to add a link to polls of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnPollsOnAccountPage
     */
    protected $linkOwnPollsOnAccountPage = true;
    
    /**
     * The amount of votes shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $voteEntriesPerPage
     */
    protected $voteEntriesPerPage = 10;
    
    /**
     * Whether to add a link to votes of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnVotesOnAccountPage
     */
    protected $linkOwnVotesOnAccountPage = true;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @PollsAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'option###poll###vote';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        VariableApiInterface $variableApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->variableApi = $variableApi;
        $this->groupRepository = $groupRepository;
    
        $this->load();
    }
    
    /**
     * Returns the kind of voting.
     *
     * @return string
     */
    public function getKindOfVoting()
    {
        return $this->kindOfVoting;
    }
    
    /**
     * Sets the kind of voting.
     *
     * @param string $kindOfVoting
     *
     * @return void
     */
    public function setKindOfVoting($kindOfVoting)
    {
        if ($this->kindOfVoting !== $kindOfVoting) {
            $this->kindOfVoting = isset($kindOfVoting) ? $kindOfVoting : '';
        }
    }
    
    /**
     * Returns the moderation group for polls.
     *
     * @return integer
     */
    public function getModerationGroupForPolls()
    {
        return $this->moderationGroupForPolls;
    }
    
    /**
     * Sets the moderation group for polls.
     *
     * @param integer $moderationGroupForPolls
     *
     * @return void
     */
    public function setModerationGroupForPolls($moderationGroupForPolls)
    {
        if ($this->moderationGroupForPolls !== $moderationGroupForPolls) {
            $this->moderationGroupForPolls = $moderationGroupForPolls;
        }
    }
    
    /**
     * Returns the option entries per page.
     *
     * @return integer
     */
    public function getOptionEntriesPerPage()
    {
        return $this->optionEntriesPerPage;
    }
    
    /**
     * Sets the option entries per page.
     *
     * @param integer $optionEntriesPerPage
     *
     * @return void
     */
    public function setOptionEntriesPerPage($optionEntriesPerPage)
    {
        if (intval($this->optionEntriesPerPage) !== intval($optionEntriesPerPage)) {
            $this->optionEntriesPerPage = intval($optionEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own options on account page.
     *
     * @return boolean
     */
    public function getLinkOwnOptionsOnAccountPage()
    {
        return $this->linkOwnOptionsOnAccountPage;
    }
    
    /**
     * Sets the link own options on account page.
     *
     * @param boolean $linkOwnOptionsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnOptionsOnAccountPage($linkOwnOptionsOnAccountPage)
    {
        if (boolval($this->linkOwnOptionsOnAccountPage) !== boolval($linkOwnOptionsOnAccountPage)) {
            $this->linkOwnOptionsOnAccountPage = boolval($linkOwnOptionsOnAccountPage);
        }
    }
    
    /**
     * Returns the poll entries per page.
     *
     * @return integer
     */
    public function getPollEntriesPerPage()
    {
        return $this->pollEntriesPerPage;
    }
    
    /**
     * Sets the poll entries per page.
     *
     * @param integer $pollEntriesPerPage
     *
     * @return void
     */
    public function setPollEntriesPerPage($pollEntriesPerPage)
    {
        if (intval($this->pollEntriesPerPage) !== intval($pollEntriesPerPage)) {
            $this->pollEntriesPerPage = intval($pollEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own polls on account page.
     *
     * @return boolean
     */
    public function getLinkOwnPollsOnAccountPage()
    {
        return $this->linkOwnPollsOnAccountPage;
    }
    
    /**
     * Sets the link own polls on account page.
     *
     * @param boolean $linkOwnPollsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnPollsOnAccountPage($linkOwnPollsOnAccountPage)
    {
        if (boolval($this->linkOwnPollsOnAccountPage) !== boolval($linkOwnPollsOnAccountPage)) {
            $this->linkOwnPollsOnAccountPage = boolval($linkOwnPollsOnAccountPage);
        }
    }
    
    /**
     * Returns the vote entries per page.
     *
     * @return integer
     */
    public function getVoteEntriesPerPage()
    {
        return $this->voteEntriesPerPage;
    }
    
    /**
     * Sets the vote entries per page.
     *
     * @param integer $voteEntriesPerPage
     *
     * @return void
     */
    public function setVoteEntriesPerPage($voteEntriesPerPage)
    {
        if (intval($this->voteEntriesPerPage) !== intval($voteEntriesPerPage)) {
            $this->voteEntriesPerPage = intval($voteEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own votes on account page.
     *
     * @return boolean
     */
    public function getLinkOwnVotesOnAccountPage()
    {
        return $this->linkOwnVotesOnAccountPage;
    }
    
    /**
     * Sets the link own votes on account page.
     *
     * @param boolean $linkOwnVotesOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnVotesOnAccountPage($linkOwnVotesOnAccountPage)
    {
        if (boolval($this->linkOwnVotesOnAccountPage) !== boolval($linkOwnVotesOnAccountPage)) {
            $this->linkOwnVotesOnAccountPage = boolval($linkOwnVotesOnAccountPage);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('MUPollsModule');
    
        if (isset($moduleVars['kindOfVoting'])) {
            $this->setKindOfVoting($moduleVars['kindOfVoting']);
        }
        if (isset($moduleVars['moderationGroupForPolls'])) {
            $this->setModerationGroupForPolls($moduleVars['moderationGroupForPolls']);
        }
        if (isset($moduleVars['optionEntriesPerPage'])) {
            $this->setOptionEntriesPerPage($moduleVars['optionEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnOptionsOnAccountPage'])) {
            $this->setLinkOwnOptionsOnAccountPage($moduleVars['linkOwnOptionsOnAccountPage']);
        }
        if (isset($moduleVars['pollEntriesPerPage'])) {
            $this->setPollEntriesPerPage($moduleVars['pollEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnPollsOnAccountPage'])) {
            $this->setLinkOwnPollsOnAccountPage($moduleVars['linkOwnPollsOnAccountPage']);
        }
        if (isset($moduleVars['voteEntriesPerPage'])) {
            $this->setVoteEntriesPerPage($moduleVars['voteEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnVotesOnAccountPage'])) {
            $this->setLinkOwnVotesOnAccountPage($moduleVars['linkOwnVotesOnAccountPage']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    
        // prepare group selectors, fallback to admin group for undefined values
        $adminGroupId = GroupsConstant::GROUP_ID_ADMIN;
        $groupId = $this->getModerationGroupForPolls();
        if ($groupId < 1) {
            $groupId = $adminGroupId;
        }
    
        $this->setModerationGroupForPolls($this->groupRepository->find($groupId));
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        // normalise group selector values
        $group = $this->getModerationGroupForPolls();
        $group = is_object($group) ? $group->getGid() : intval($group);
        $this->setModerationGroupForPolls($group);
    
        $this->variableApi->set('MUPollsModule', 'kindOfVoting', $this->getKindOfVoting());
        $this->variableApi->set('MUPollsModule', 'moderationGroupForPolls', $this->getModerationGroupForPolls());
        $this->variableApi->set('MUPollsModule', 'optionEntriesPerPage', $this->getOptionEntriesPerPage());
        $this->variableApi->set('MUPollsModule', 'linkOwnOptionsOnAccountPage', $this->getLinkOwnOptionsOnAccountPage());
        $this->variableApi->set('MUPollsModule', 'pollEntriesPerPage', $this->getPollEntriesPerPage());
        $this->variableApi->set('MUPollsModule', 'linkOwnPollsOnAccountPage', $this->getLinkOwnPollsOnAccountPage());
        $this->variableApi->set('MUPollsModule', 'voteEntriesPerPage', $this->getVoteEntriesPerPage());
        $this->variableApi->set('MUPollsModule', 'linkOwnVotesOnAccountPage', $this->getLinkOwnVotesOnAccountPage());
        $this->variableApi->set('MUPollsModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
