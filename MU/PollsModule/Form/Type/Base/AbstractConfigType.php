<?php
/**
 * Polls.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\PollsModule\Form\Type\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var array
     */
    protected $moduleVars;

    /**
     * ConfigType constructor.
     *
     * @param TranslatorInterface $translator  Translator service instance
     * @param object              $moduleVars  Existing module vars
     */
    public function __construct(
        TranslatorInterface $translator,
        $moduleVars
    ) {
        $this->setTranslator($translator);
        $this->moduleVars = $moduleVars;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addSettingsFields($builder, $options);
        $this->addListViewsFields($builder, $options);
        $this->addIntegrationFields($builder, $options);

        $builder
            ->add('save', SubmitType::class, [
                'label' => $this->__('Update configuration'),
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn btn-success'
                ]
            ])
            ->add('cancel', SubmitType::class, [
                'label' => $this->__('Cancel'),
                'icon' => 'fa-times',
                'attr' => [
                    'class' => 'btn btn-default',
                    'formnovalidate' => 'formnovalidate'
                ]
            ])
        ;
    }

    /**
     * Adds fields for settings fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSettingsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('kindOfVoting', ChoiceType::class, [
                'label' => $this->__('Kind of voting') . ':',
                'data' => isset($this->moduleVars['kindOfVoting']) ? $this->moduleVars['kindOfVoting'] : '',
                'empty_data' => 'Session',
                'attr' => [
                    'title' => $this->__('Choose the kind of voting.')
                ],'choices' => [
                    $this->__('Cookie') => 'cookie',
                    $this->__('Session') => 'session',
                    $this->__('User') => 'user'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
        ;
    }

    /**
     * Adds fields for list views fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('optionEntriesPerPage', IntegerType::class, [
                'label' => $this->__('Option entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of options shown per page')
                ],
                'help' => $this->__('The amount of options shown per page'),
                'required' => false,
                'data' => isset($this->moduleVars['optionEntriesPerPage']) ? intval($this->moduleVars['optionEntriesPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the option entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnOptionsOnAccountPage', CheckboxType::class, [
                'label' => $this->__('Link own options on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to options of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to options of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['linkOwnOptionsOnAccountPage']) ? $this->moduleVars['linkOwnOptionsOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own options on account page option.')
                ],
            ])
            ->add('pollEntriesPerPage', IntegerType::class, [
                'label' => $this->__('Poll entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of polls shown per page')
                ],
                'help' => $this->__('The amount of polls shown per page'),
                'required' => false,
                'data' => isset($this->moduleVars['pollEntriesPerPage']) ? intval($this->moduleVars['pollEntriesPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the poll entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnPollsOnAccountPage', CheckboxType::class, [
                'label' => $this->__('Link own polls on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to polls of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to polls of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['linkOwnPollsOnAccountPage']) ? $this->moduleVars['linkOwnPollsOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own polls on account page option.')
                ],
            ])
            ->add('voteEntriesPerPage', IntegerType::class, [
                'label' => $this->__('Vote entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of votes shown per page')
                ],
                'help' => $this->__('The amount of votes shown per page'),
                'required' => false,
                'data' => isset($this->moduleVars['voteEntriesPerPage']) ? intval($this->moduleVars['voteEntriesPerPage']) : intval(10),
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the vote entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnVotesOnAccountPage', CheckboxType::class, [
                'label' => $this->__('Link own votes on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to votes of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to votes of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->moduleVars['linkOwnVotesOnAccountPage']) ? $this->moduleVars['linkOwnVotesOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own votes on account page option.')
                ],
            ])
        ;
    }

    /**
     * Adds fields for integration fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIntegrationFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('enabledFinderTypes', ChoiceType::class, [
                'label' => $this->__('Enabled finder types') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).')
                ],
                'help' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).'),
                'data' => isset($this->moduleVars['enabledFinderTypes']) ? $this->moduleVars['enabledFinderTypes'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the enabled finder types.')
                ],'choices' => [
                    $this->__('Option') => 'option',
                    $this->__('Poll') => 'poll',
                    $this->__('Vote') => 'vote'
                ],
                'choices_as_values' => true,
                'multiple' => true
            ])
        ;
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'mupollsmodule_config';
    }
}
